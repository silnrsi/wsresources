; Extended Sindhi as implemented in EEGEncodingName		"X-SIL-EEG-SINDHI"DescriptiveName		"SIL EEG Extended Sindhi"MacEncoding	31,0,0	; Mac OS script code used for Sindhi; This table does not yet address several issues:;; - direction reversal for numeral strings;; - contextual selection of ASCII or Sindhi chars for shared punctuation, etc.,;   when mapping from Unicode to 8-bit (it will favour Sindhi);; - strings of hamzas, or excessive numbers of diacritics on hamza;; - three diacritics defined in EEG Sindhi but not available in Unicode are unmapped;; Because of these limitations, conversion is NOT 100% round-trip safe,; especially for text that mixes ASCII and Sindhi.ByteDefault	0xbfUniDefault	replacement_character; Mappings for the Extended Sindhi character set used in EEG0x80	<>	0x200b	; thinspace0x8c	<>	0x06b5	; lbar (¥¥¥Unicode: lam with wedge above)0x8d	<>	0x20dd	; circle0x8e	<>	0x201c	; dbl_quote_open0x8f	<>	0x201d	; dbl_quote_close0x90	<>	0x2039	; wedge_right0x91	<>	0x203a	; wedge_left0x92	<>	0x002b	; plus0x93	<>	0x00d7	; times0x94	<>	0x00f7	; divide0x95	<>	0x003d	; equals0x96	<>	0x0025	; percent0x97	<>	0x2026	; ellipsis0x98	<>	0x2022	; bullet; 0x9d			; dia_swad0x9e	<>	0x005b	; bracket_open0x9f	<>	0x005d	; bracket_close0xa0	<>	0x0020	; space_RL; 0xa1			; dia_ain; 0xa2			; dia_name0xa3	<>	0x0670	; dia_alif0xf8 0xa4	<>	0x06fd	; hamza + dia_marks_below0xf2 0xa4	<>	0x06fe	; mim + dia_marks_below; 0xa4			; dia_marks_below (not valid in isolation; will map to ?)0xa5	<>	0x06c1	; round_h0xa6	<>	0x007b	; brace_open0xa7	<>	0x007d	; brace_close0xa8	<>	0x2018	; quote_open0xa9	<>	0x2019	; quote_close0xaa	<>	0x0028	; paren_open0xab	<>	0x0029	; paren_close0xac	<>	0x060c	; comma0xad	<>	0x2013	; hyphen -> endash0xae	<>	0x002e	; period0xaf	<>	0x002f	; slash0xb0	<>	0x06f0	; zero0xb0	<	0x0660	; zero (alt)0xb1	<>	0x06f1	; one0xb1	<	0x0661	; one (alt)0xb2	<>	0x06f2	; two0xb2	<	0x0662	; two (alt)0xb3	<>	0x06f3	; three0xb3	<	0x0663	; three (alt)0xb4	<>	0x06f4	; four0xb4	<	0x0664	; four (alt)0xb5	<>	0x06f5	; five0xb5	<	0x0665	; five (alt)0xb6	<>	0x06f6	; six0xb6	<	0x0666	; six (alt)0xb7	<>	0x06f7	; seven0xb7	<	0x0667	; seven (alt)0xb8	<>	0x06f8	; eight0xb8	<	0x0668	; eight (alt)0xb9	<>	0x06f9	; nine0xb9	<	0x0669	; nine (alt)0xba	<>	0x003a	; colon0xbb	<>	0x061b	; semicolon0xbc	<>	0x00a0	; fixedspace0xbd	<>	0x064c	; dia_dbl_pesh0xbe	<>	0x066d	; star0xbf	<>	0x061f	; question0xc0	<>	0x0640	; kashida0xc1	<>	0x0021	; exclamation0xc2	<>	0x0622	; aa0xc3	<>	0x0627	; a0xc4	<>	0x0628	; b0xc5	<>	0x067b	; bb0xc6	<>	0x0680	; bh0xc7	<>	0x062a	; t0xc8	<>	0x067f	; th0xc9	<>	0x067d	; T0xca	<>	0x067a	; Th0xcb	<>	0x062b	; se0xcc	<>	0x067e	; p0xcd	<>	0x06a6	; ph0xce	<>	0x062c	; j0xcf	<>	0x0684	; j2v0xd0	<>	0x062c 0x06be	; jh0xd1	<>	0x0683	; j2h0xd2	<>	0x0686	; c0xd3	<>	0x0687	; ch0xd4	<>	0x062d	; X0xd5	<>	0x062e	; x0xd6	<>	0x062f	; d0xd7	<>	0x068c	; d2a0xd8	<>	0x068a	; d1b0xd9	<>	0x068d	; d2b0xda	<>	0x068f	; d3a0xdb	<>	0x0630	; d1a0xdc	<>	0x062f 0x06db	; dhat (¥¥¥Unicode: three dots above)0xdd	<>	0x0631	; r0xde	<>	0x0699	; R0xdf	<>	0x0632	; z0xe0	<>	0x0631 0x06db	; rhat (¥¥¥Unicode: three dots above)0xe1	<>	0x0633	; sin0xe2	<>	0x0634	; shin0xe3	<>	0x0635	; swad0xe4	<>	0x0636	; zwad0xe5	<>	0x0637	; toe0xe6	<>	0x0638	; zoe0xe7	<>	0x0639	; ain0xe8	<>	0x063a	; ghain0xe9	<>	0x0641	; f0xea	<>	0x0642	; q0xeb	<>	0x06aa	; k0xec	<>	0x06a9	; kh0xec	<	0x0643	; kh (alt)0xed	<>	0x06af	; g0xee	<>	0x06b3	; g2b0xef	<>	0x06af 0x06be	; gh0xf0	<>	0x06b1	; g2a0xf1	<>	0x0644	; l0xf2	<>	0x0645	; m0xf3	<>	0x0646	; n0xf4	<>	0x06bb	; N0xf5	<>	0x0648	; u0xf6	<>	0x0647	; h0xf7	<>	0x0647 0x06db	; hhat (¥¥¥Unicode: three dots above)0xf8	<>	0x0621	; hamza (isolated)0xf9	<>	0x064a	; i0xfa	<>	0x064e	; dia_a0xfb	<>	0x0650	; dia_i0xfc	<>	0x064f	; dia_u0xfd	<>	0x0651	; dia_tashdid0xfe	<>	0x0652	; dia_sukun0xff	<>	0x064b	; dia_tanwin; Hamza needs special treatment because of different linking behavior:ByteClass [DIA] = (			\		0x9d				\		0xa1 0xa2 0xa3	\		0xbd				\		0xfa 0xfb 0xfc 0xfd 0xfe 0xff	)ByteClass [LTR] = (	\		0x8c		\		0xa5		\		0xc0      0xc2 0xc3 0xc4 0xc5 0xc6 0xc7 0xc8 0xc9 0xca 0xcb 0xcc 0xcd 0xce 0xcf	\		0xd0 0xd1 0xd2 0xd3 0xd4 0xd5 0xd6 0xd7 0xd8 0xd9 0xda 0xdb 0xdc 0xdd 0xde 0xdf	\		0xe0 0xe1 0xe2 0xe3 0xe4 0xe5 0xe6 0xe7 0xe8 0xe9 0xea 0xeb 0xec 0xed 0xee 0xef	\		0xf0 0xf1 0xf2 0xf3 0xf4 0xf5 0xf6 0xf7 0xf8 0xf9 )UniClass [DIA] = (	\		0x0670		\		0x064c		\		0x064e 0x0650 0x064f 0x0651 0x0652 0x064b )UniClass [LTR] = (	\		0x06b5		\		0x06c1		\		0x0640 0x0622 0x0627 0x0628 0x067b 0x0680 0x062a 0x067f 0x067d 0x067a	\		0x062b 0x067e 0x06a6 0x062c 0x0684 0x0683 0x0686 0x0687 0x062d 0x062e	\		0x062f 0x068c 0x068a 0x068d 0x068f 0x0630 0x062f 0x0631 0x0699 0x0632	\		0x0633 0x0634 0x0635 0x0636 0x0637 0x0638 0x0639 0x063a 0x0641 0x0642	\		0x06aa 0x06a9 0x0643 0x06af 0x06b3 0x06b1 0x0644 0x0645 0x0646 0x06bb	\		0x0648 0x0647 0x064a	)	0xf9 0xf8	<	0x06260xf8 / _             [LTR]	<>	0x0626 / _             [LTR]0xf8 / _       [DIA] [LTR]	<>	0x0626 / _       [DIA] [LTR]0xf8 / _ [DIA] [DIA] [LTR]	<>	0x0626 / _ [DIA] [DIA] [LTR]ByteClass [ascii] = ( 0 .. 127 )UniClass  [ascii] = ( 0 .. 127 )[ascii] <> [ascii]	; note that some of these are actually masked by specific rules above